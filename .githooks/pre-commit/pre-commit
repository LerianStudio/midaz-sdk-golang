#!/bin/bash

# Find the project root directory
PROJECT_ROOT=$(git rev-parse --show-toplevel)

# Source utility scripts
source "$PROJECT_ROOT/scripts/utils/colors.sh"
source "$PROJECT_ROOT/scripts/utils/ascii.sh"

branch=$(git rev-parse --abbrev-ref HEAD)

if [[ $branch == "main" || $branch == "develop" || $branch == release/* ]]; then
  echo -e "${bold_red}You can't commit directly to protected branches${nc}"
  exit 1
fi

# Run go fmt check
echo -e "${bold}Checking Go formatting...${nc}"
files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$')
if [ -n "$files" ]; then
    unformatted=$(gofmt -l $files)
    if [ -n "$unformatted" ]; then
        echo -e "${bold_red}The following files need to be formatted:${nc}"
        for file in $unformatted; do
            echo "$file"
        done
        echo -e "${bold_yellow}Running gofmt...${nc}"
        gofmt -w $unformatted
        git add $unformatted
        echo -e "${bold_green}Files formatted and staged.${nc}"
    else
        echo -e "${bold_green}All Go files are formatted correctly.${nc}"
    fi
fi

# Run quick lint check
echo -e "${bold}Running quick lint check...${nc}"
golangci-lint run --fast --path-prefix=. --new-from-rev=HEAD~ --issues-exit-code=0 > /dev/null
if [ $? -eq 0 ]; then
    echo -e "${bold_green}0 issues.${nc}"
else
    golangci-lint run --fast --path-prefix=. --new-from-rev=HEAD~ --issues-exit-code=0
    echo -e "${bold_yellow}Please fix the issues above before committing.${nc}"
    echo -e "${bold_yellow}To bypass this check, use 'git commit --no-verify'${nc}"
    # Not exiting with error here, just warning
fi

# Check commit message format
commit_msg_type_regex='feat|fix|refactor|style|test|docs|build|ci|chore'
commit_msg_scope_regex='.{1,20}'
commit_msg_description_regex='.{1,100}'
commit_msg_regex="^(${commit_msg_type_regex})(\(${commit_msg_scope_regex}\))?: (${commit_msg_description_regex})\$"
merge_msg_regex="^Merge branch '.+'\$"

echo -e "${bold}Checking commit message format...${nc}"
last_commit_msg=$(cat "$PROJECT_ROOT/.git/COMMIT_EDITMSG")
if ! [[ "$last_commit_msg" =~ (${commit_msg_regex})|(${merge_msg_regex}) ]]; then
    echo -e "${bold_red}Invalid commit message format:${nc}"
    echo "$last_commit_msg"
    echo -e "${bold_yellow}Format should be: type(scope): description${nc}"
    echo -e "${bold_yellow}Example: feat(api): add new endpoint for users${nc}"
    echo -e "${bold_yellow}Valid types: ${commit_msg_type_regex}${nc}"
    exit 1
else
    echo -e "${bold_green}Commit message format is valid.${nc}"
fi

echo -e "${bold_green}Pre-commit checks completed successfully.${nc}"
exit 0