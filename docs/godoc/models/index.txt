package models // import "github.com/LerianStudio/midaz-sdk-golang/v2/models"

Package models defines the data models used by the Midaz SDK.

Package models defines the data models used by the Midaz SDK.

Package models defines the data models used by the Midaz SDK.

Package models defines the data models used by the Midaz SDK.

Package models defines the data models used by the Midaz SDK.

Package models defines the data models used by the Midaz SDK.

This package provides models that either: 1. Directly align with backend types
from pkg/mmodel where possible 2. Implement SDK-specific types only where
necessary

The goal is to maintain a simple, direct approach without unnecessary
abstraction layers while ensuring the SDK interfaces cleanly with the backend
API.

Key Model Types:

Account: Represents an account in the Midaz system, which is a fundamental
entity for tracking assets and balances. Accounts belong to organizations and
ledgers.

Asset: Represents a type of value that can be tracked and transferred within the
Midaz system, such as currencies, securities, or other financial instruments.

Balance: Represents the current state of an account's holdings for a specific
asset, including total, available, and on-hold amounts.

Ledger: Represents a collection of accounts and transactions within an
organization, providing a complete record of financial activities.

Organization: Represents a business entity that owns ledgers, accounts,
and other resources within the Midaz system.

Portfolio: Represents a collection of accounts that belong to a specific entity
within an organization and ledger, used for grouping and management.

Segment: Represents a categorization unit for more granular organization of
accounts or other entities within a ledger.

Transaction: Represents a financial event that affects one or more accounts
through a series of operations (debits and credits).

Operation: Represents an individual accounting entry within a transaction,
typically a debit or credit to a specific account.

Queue: Represents a transaction queue for temporarily storing transaction data
before processing, allowing for batched or asynchronous handling.

Each model type includes constructors, conversion methods between SDK and
backend models, and utility methods for setting optional fields. Input
structures for creating and updating resources are also provided.

Package models defines the data models used by the Midaz SDK.

Package models defines the data models used by the Midaz SDK.

Package models defines the data models used by the Midaz SDK.

const TransactionStatusPending = "pending" ...
const StatusActive = "ACTIVE" ...
const DefaultLimit = 10 ...
const QueryParamLimit = "limit" ...
func GetAccountAlias(account Account) string
func GetAccountIdentifier(account Account) string
func IsStatusEmpty(status Status) bool
type Account = mmodel.Account
type AccountFilter struct{ ... }
type AccountRule = mmodel.AccountRule
type AccountType = mmodel.AccountType
type Accounts struct{ ... }
    func FromMmodel(accounts mmodel.Accounts) Accounts
type Address struct{ ... }
    func FromMmodelAddress(modelAddress mmodel.Address) Address
    func NewAddress(line1, zipCode, city, state, country string) Address
type Amount struct{ ... }
type AmountInput struct{ ... }
type Asset = mmodel.Asset
type Balance = mmodel.Balance
type BaseResponse struct{ ... }
type CreateAccountInput struct{ ... }
    func NewCreateAccountInput(name, assetCode, accountType string) *CreateAccountInput
type CreateAccountTypeInput struct{ ... }
    func NewCreateAccountTypeInput(name, keyValue string) *CreateAccountTypeInput
    func WithCreateAccountTypeDescription(input *CreateAccountTypeInput, description string) *CreateAccountTypeInput
    func WithCreateAccountTypeMetadata(input *CreateAccountTypeInput, metadata map[string]any) *CreateAccountTypeInput
type CreateAssetInput struct{ ... }
    func NewCreateAssetInput(name, code string) *CreateAssetInput
type CreateLedgerInput struct{ ... }
    func NewCreateLedgerInput(name string) *CreateLedgerInput
type CreateOperationInput struct{ ... }
type CreateOperationRouteInput struct{ ... }
    func NewCreateOperationRouteInput(title, description, operationType string) *CreateOperationRouteInput
    func WithCreateOperationRouteAccountAlias(input *CreateOperationRouteInput, alias string) *CreateOperationRouteInput
    func WithCreateOperationRouteAccountType(input *CreateOperationRouteInput, accountTypes []string) *CreateOperationRouteInput
    func WithCreateOperationRouteMetadata(input *CreateOperationRouteInput, metadata map[string]any) *CreateOperationRouteInput
type CreateOrganizationInput struct{ ... }
    func NewCreateOrganizationInput(legalName string) *CreateOrganizationInput
type CreatePortfolioInput struct{ ... }
    func NewCreatePortfolioInput(entityID, name string) *CreatePortfolioInput
type CreateSegmentInput struct{ ... }
    func NewCreateSegmentInput(name string) *CreateSegmentInput
type CreateTransactionInput struct{ ... }
    func NewCreateTransactionInput(assetCode string, amount string) *CreateTransactionInput
type CreateTransactionRouteInput struct{ ... }
    func NewCreateTransactionRouteInput(title, description string, operationRoutes []string) *CreateTransactionRouteInput
    func WithTransactionRouteMetadata(input *CreateTransactionRouteInput, metadata map[string]any) *CreateTransactionRouteInput
type DSLAccountRef struct{ ... }
type DSLAmount struct{ ... }
type DSLDistribute struct{ ... }
type DSLFromTo struct{ ... }
type DSLSend struct{ ... }
type DSLSource struct{ ... }
type Destination struct{ ... }
type DistributeInput struct{ ... }
type ErrorResponse struct{ ... }
type FromToInput struct{ ... }
type Ledger = mmodel.Ledger
type ListAccountInput struct{ ... }
type ListAccountResponse struct{ ... }
type ListOptions struct{ ... }
    func NewListOptions() *ListOptions
type ListResponse[T any] struct{ ... }
type Metadata map[string]any
type MetricsCount struct{ ... }
type ObjectWithMetadata struct{ ... }
type Operation struct{ ... }
    func FromMmodelOperation(operation any) Operation
type OperationAmount struct{ ... }
type OperationRoute = mmodel.OperationRoute
type OperationRouteInputType string
    const OperationRouteInputTypeSource OperationRouteInputType = "source" ...
type OperationRouteType string
    const OperationRouteTypeDebit OperationRouteType = "debit" ...
type OperationType string
    const OperationTypeDebit OperationType = "DEBIT" ...
type Organization = mmodel.Organization
type Pagination struct{ ... }
type Portfolio = mmodel.Portfolio
type Queue struct{ ... }
    func FromMmodelQueue(queue mmodel.Queue) Queue
type QueueData struct{ ... }
type Rate struct{ ... }
type Segment = mmodel.Segment
type SendInput struct{ ... }
type Share struct{ ... }
type SortDirection string
    const SortAscending SortDirection = "asc" ...
type Source struct{ ... }
type SourceInput struct{ ... }
type Status = mmodel.Status
    func NewStatus(code string) Status
    func WithStatusDescription(status Status, description string) Status
type Timestamps struct{ ... }
type Transaction struct{ ... }
type TransactionDSLInput struct{ ... }
    func FromTransactionMap(data map[string]any) *TransactionDSLInput
type TransactionRoute = mmodel.TransactionRoute
type UpdateAccountInput struct{ ... }
    func NewUpdateAccountInput() *UpdateAccountInput
type UpdateAccountTypeInput struct{ ... }
    func NewUpdateAccountTypeInput() *UpdateAccountTypeInput
    func WithUpdateAccountTypeDescription(input *UpdateAccountTypeInput, description string) *UpdateAccountTypeInput
    func WithUpdateAccountTypeMetadata(input *UpdateAccountTypeInput, metadata map[string]any) *UpdateAccountTypeInput
    func WithUpdateAccountTypeName(input *UpdateAccountTypeInput, name string) *UpdateAccountTypeInput
type UpdateAssetInput struct{ ... }
    func NewUpdateAssetInput() *UpdateAssetInput
type UpdateBalanceInput struct{ ... }
    func NewUpdateBalanceInput() *UpdateBalanceInput
type UpdateLedgerInput struct{ ... }
    func NewUpdateLedgerInput() *UpdateLedgerInput
type UpdateOperationRouteInput struct{ ... }
    func NewUpdateOperationRouteInput() *UpdateOperationRouteInput
    func WithUpdateOperationRouteAccountAlias(input *UpdateOperationRouteInput, alias string) *UpdateOperationRouteInput
    func WithUpdateOperationRouteAccountType(input *UpdateOperationRouteInput, accountTypes []string) *UpdateOperationRouteInput
    func WithUpdateOperationRouteDescription(input *UpdateOperationRouteInput, description string) *UpdateOperationRouteInput
    func WithUpdateOperationRouteMetadata(input *UpdateOperationRouteInput, metadata map[string]any) *UpdateOperationRouteInput
    func WithUpdateOperationRouteTitle(input *UpdateOperationRouteInput, title string) *UpdateOperationRouteInput
type UpdateOrganizationInput struct{ ... }
    func NewUpdateOrganizationInput() *UpdateOrganizationInput
type UpdatePortfolioInput struct{ ... }
    func NewUpdatePortfolioInput() *UpdatePortfolioInput
type UpdateSegmentInput struct{ ... }
    func NewUpdateSegmentInput() *UpdateSegmentInput
type UpdateTransactionInput struct{ ... }
    func NewUpdateTransactionInput() *UpdateTransactionInput
type UpdateTransactionRouteInput struct{ ... }
    func NewUpdateTransactionRouteInput() *UpdateTransactionRouteInput
    func WithUpdateTransactionRouteDescription(input *UpdateTransactionRouteInput, description string) *UpdateTransactionRouteInput
    func WithUpdateTransactionRouteMetadata(input *UpdateTransactionRouteInput, metadata map[string]any) *UpdateTransactionRouteInput
    func WithUpdateTransactionRouteTitle(input *UpdateTransactionRouteInput, title string) *UpdateTransactionRouteInput
