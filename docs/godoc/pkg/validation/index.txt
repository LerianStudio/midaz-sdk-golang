package validation // import "github.com/LerianStudio/midaz-sdk-golang/pkg/validation"

Package validation provides validation utilities for the Midaz SDK.

This package contains functions for validating various aspects of Midaz data:
- Transaction validation (DSL, standard inputs) - Asset code and type validation
- Account alias and type validation - Metadata validation - Address validation -
Date range validation

These utilities help ensure that data is valid before sending it to the API,
providing early feedback and preventing unnecessary API calls with invalid data.

The package implements the functional options pattern for configuring validation
behavior. Example:

    validator, err := NewValidator(
        WithMaxMetadataSize(8192),
        WithStrictMode(true),
    )
    if err != nil {
        log.Fatal(err)
    }

    // Use the validator
    if err := validator.ValidateMetadata(metadata); err != nil {
        log.Fatal(err)
    }

var ErrMetadataSizeExceeded = &ValidationError{ ... }
func GetCommonSuggestions(field string, value any, sugType SuggestionType) []string
func GetExampleValue(field string) string
func GetExternalAccountReference(assetCode string) string
func IsValidAmount(amount int64, scale int64) bool
func IsValidAuthToken(token string) bool
func IsValidExternalAccountID(id string) bool
func IsValidUUID(s string) bool
func ValidateAccountAlias(alias string) error
func ValidateAccountType(accountType string) error
func ValidateAddress(address *Address) error
func ValidateAssetCode(assetCode string) error
func ValidateAssetType(assetType string) error
func ValidateCountryCode(code string) error
func ValidateCurrencyCode(code string) error
func ValidateDateRange(start, end time.Time) error
func ValidateMetadata(metadata map[string]any) error
func ValidateTransactionCode(code string) error
func ValidateTransactionDSL(input TransactionDSLValidator) error
type AccountReference interface{ ... }
type Address struct{ ... }
type FieldError struct{ ... }
    func BuildFieldError(field string, value any, message string) *FieldError
    func EnhancedValidateAccountAlias(alias string) *FieldError
    func EnhancedValidateAccountReference(account string, transactionAsset string) *FieldError
    func EnhancedValidateAccountType(accountType string) *FieldError
    func EnhancedValidateAmount(amount, scale int64) *FieldError
    func EnhancedValidateAssetCode(assetCode string) *FieldError
    func EnhancedValidateAssetType(assetType string) *FieldError
    func EnhancedValidateCountryCode(code string) *FieldError
    func EnhancedValidateCurrencyCode(code string) *FieldError
    func EnhancedValidateExternalAccount(account string) *FieldError
    func EnhancedValidateExternalAccountWithTransactionAsset(account string, transactionAsset string) *FieldError
    func EnhancedValidateTransactionCode(code string) *FieldError
    func WrapError(field string, value any, err error) *FieldError
type FieldErrors struct{ ... }
    func EnhancedValidateAddress(address *Address, fieldPrefix string) *FieldErrors
    func EnhancedValidateDateRange(start, end time.Time, startField, endField string) *FieldErrors
    func EnhancedValidateMetadata(metadata map[string]any) *FieldErrors
    func EnhancedValidateTransactionDSL(input TransactionDSLValidator) *FieldErrors
    func EnhancedValidateTransactionInput(input map[string]any) *FieldErrors
    func NewFieldErrors() *FieldErrors
type SuggestionType string
    const Format SuggestionType = "format" ...
type TransactionDSLValidator interface{ ... }
type ValidationError struct{ ... }
type ValidationSummary struct{ ... }
    func ValidateCreateTransactionInput(input map[string]any) ValidationSummary
type Validator struct{ ... }
    func DefaultValidator() *Validator
    func NewValidator(options ...core.ValidationOption) (*Validator, error)
