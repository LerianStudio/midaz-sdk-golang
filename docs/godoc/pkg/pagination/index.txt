package pagination // import "github.com/LerianStudio/midaz-sdk-golang/v2/pkg/pagination"

Package pagination provides utilities for working with paginated API responses

func CollectAll[T any](ctx context.Context, operationName string, entityType string, ...) ([]T, error)
func GetEntityTypeFromURL(url string) string
type EntityPaginatorOption func(*EntityPaginatorOptions) error
    func WithEntityAdapterOptions(options ...ModelAdapterOption) EntityPaginatorOption
    func WithEntityInitialOptions(options any) EntityPaginatorOption
    func WithEntityOperationName(name string) EntityPaginatorOption
    func WithEntityPaginatorOptions(options ...PaginatorOption) EntityPaginatorOption
    func WithPaginatorEntityType(entityType string) EntityPaginatorOption
type EntityPaginatorOptions struct{ ... }
    func DefaultEntityPaginatorOptions() *EntityPaginatorOptions
type Event struct{ ... }
type ModelAdapter struct{ ... }
    func DefaultModelAdapter() *ModelAdapter
    func NewModelAdapter(options ...ModelAdapterOption) (*ModelAdapter, error)
type ModelAdapterOption func(*ModelAdapter) error
    func WithAdapterDefaultLimit(limit int) ModelAdapterOption
    func WithDefaultFilters(filters map[string]string) ModelAdapterOption
    func WithDefaultOffset(offset int) ModelAdapterOption
type Observer interface{ ... }
    func NewObserver() Observer
type PageFetcher[T any] func(ctx context.Context, options PageOptions) (*PageResult[T], error)
type PageInfo struct{ ... }
type PageOptions struct{ ... }
type PageResult[T any] struct{ ... }
    func PageResultFromResponse[T any, R any](adapter *ModelAdapter, response any, itemsExtractor func(R) T) *PageResult[T]
type Paginator[T any] interface{ ... }
    func CreateEntityPaginator[T any, R any](ctx context.Context, listFn func(context.Context, any) (any, error), ...) (Paginator[T], error)
    func CreateEntityPaginatorWithDefaults[T any, R any](ctx context.Context, operationName string, entityType string, ...) Paginator[T]
    func NewPaginator[T any](fetcher PageFetcher[T], options ...PaginatorOption) (Paginator[T], error)
    func NewPaginatorWithDefaults[T any](operationName string, entityType string, fetcher PageFetcher[T], ...) Paginator[T]
type PaginatorOption func(*PaginatorOptions) error
    func WithCursor(cursor string) PaginatorOption
    func WithDefaultLimit(defaultLimit int) PaginatorOption
    func WithEntityType(entityType string) PaginatorOption
    func WithFilters(filters map[string]string) PaginatorOption
    func WithLimit(limit int) PaginatorOption
    func WithObserver(observer Observer) PaginatorOption
    func WithOffset(offset int) PaginatorOption
    func WithOperationName(operationName string) PaginatorOption
    func WithPageOptions(options PageOptions) PaginatorOption
    func WithWorkerCount(workerCount int) PaginatorOption
type PaginatorOptions struct{ ... }
    func DefaultPaginatorOptions() *PaginatorOptions
