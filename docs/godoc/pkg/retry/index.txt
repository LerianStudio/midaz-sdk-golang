package retry // import "github.com/LerianStudio/midaz-sdk-golang/pkg/retry"

Package retry provides utilities for implementing retry logic with exponential
backoff, including specialized support for HTTP requests.

Package retry provides utilities for implementing retry logic with exponential
backoff and jitter for resilient operations. It allows for configurable retry
strategies, context-aware cancellation, and flexible error handling.

var DefaultRetryableErrors = []string{ ... }
var DefaultRetryableHTTPCodes = []int{ ... }
func Do(ctx context.Context, fn func() error, opts ...Option) error
func DoWithContext(ctx context.Context, fn func() error) error
func IsRetryableError(err error, options *Options) bool
func WithHTTPOptionsContext(ctx context.Context, options *HTTPOptions) context.Context
func WithOptionsContext(ctx context.Context, options *Options) context.Context
type HTTPOption func(*HTTPOptions) error
    func WithHTTPBackoffFactor(factor float64) HTTPOption
    func WithHTTPHighReliability() HTTPOption
    func WithHTTPInitialDelay(delay time.Duration) HTTPOption
    func WithHTTPJitterFactor(factor float64) HTTPOption
    func WithHTTPMaxDelay(delay time.Duration) HTTPOption
    func WithHTTPMaxRetries(maxRetries int) HTTPOption
    func WithHTTPNoRetry() HTTPOption
    func WithHTTPPreRetryHook(hook func(ctx context.Context, req *http.Request, resp *HTTPResponse) error) HTTPOption
    func WithHTTPRetryAllServerErrors(retry bool) HTTPOption
    func WithHTTPRetryOn4xx(codes []int) HTTPOption
    func WithHTTPRetryableHTTPCodes(codes []int) HTTPOption
    func WithHTTPRetryableNetworkErrors(errors []string) HTTPOption
type HTTPOptions struct{ ... }
    func DefaultHTTPOptions() *HTTPOptions
    func GetHTTPOptionsFromContext(ctx context.Context) *HTTPOptions
type HTTPResponse struct{ ... }
    func DoHTTP(ctx context.Context, client *http.Client, method, url string, body io.Reader, ...) (*HTTPResponse, error)
    func DoHTTPRequest(ctx context.Context, client *http.Client, req *http.Request, ...) (*HTTPResponse, error)
    func DoHTTPRequestWithContext(ctx context.Context, client *http.Client, req *http.Request) (*HTTPResponse, error)
type Option func(*Options) error
    func WithBackoffFactor(factor float64) Option
    func WithHighReliability() Option
    func WithInitialDelay(delay time.Duration) Option
    func WithJitterFactor(factor float64) Option
    func WithMaxDelay(delay time.Duration) Option
    func WithMaxRetries(maxRetries int) Option
    func WithNoRetry() Option
    func WithRetryableErrors(errors []string) Option
    func WithRetryableHTTPCodes(codes []int) Option
type Options struct{ ... }
    func DefaultOptions() *Options
    func GetOptionsFromContext(ctx context.Context) *Options
