package entities // import "github.com/LerianStudio/midaz-sdk-golang/v2/entities"

Package entities provides direct access to Midaz API services.

Package entities provides access to the Midaz API resources and operations.
It implements service interfaces for interacting with accounts, assets, ledgers,
transactions, and other Midaz platform resources.

Package entities provides high-level encapsulation for Midaz API interaction.
It provides domain-specific entities like accounts, assets, organizations, etc.

const ServiceOnboarding = "onboarding" ...
func AddURLParams(baseURL string, params map[string]string) string
func GetWrappedHTTPClient(client *http.Client, authToken string) *http.Client
func WithIdempotencyKey(ctx context.Context, key string) context.Context
type AccountTypesService interface{ ... }
    func NewAccountTypesEntity(client *http.Client, authToken string, baseURLs map[string]string) AccountTypesService
type AccountsService interface{ ... }
    func NewAccountsEntity(client *http.Client, authToken string, baseURLs map[string]string) AccountsService
type AssetsService interface{ ... }
    func NewAssetsEntity(client *http.Client, authToken string, baseURLs map[string]string) AssetsService
type BalancesService interface{ ... }
    func NewBalancesEntity(client *http.Client, authToken string, baseURLs map[string]string) BalancesService
type Config interface{ ... }
type Entity struct{ ... }
    func New(baseURL string, options ...Option) (*Entity, error)
    func NewEntity(client *http.Client, authToken string, baseURLs map[string]string, ...) (*Entity, error)
    func NewEntityWithConfig(config Config, options ...Option) (*Entity, error)
    func NewWithServiceURLs(serviceURLs map[string]string, options ...Option) (*Entity, error)
type HTTPClient struct{ ... }
    func NewHTTPClient(client *http.Client, authToken string, provider observability.Provider) *HTTPClient
type LedgersService interface{ ... }
    func NewLedgersEntity(client *http.Client, authToken string, baseURLs map[string]string) LedgersService
type OperationRoutesService interface{ ... }
    func NewOperationRoutesEntity(client *http.Client, authToken string, baseURLs map[string]string) OperationRoutesService
type OperationsService interface{ ... }
    func NewOperationsEntity(client *http.Client, authToken string, baseURLs map[string]string) OperationsService
type Option func(*Entity) error
    func WithContext(ctx context.Context) Option
    func WithDebug(debug bool) Option
    func WithHTTPClient(client *http.Client) Option
    func WithObservability(provider observability.Provider) Option
    func WithPluginAuth(pluginAuth auth.AccessManager) Option
    func WithUserAgent(userAgent string) Option
type OrganizationsService interface{ ... }
    func NewOrganizationsEntity(client *http.Client, authToken string, baseURLs map[string]string) OrganizationsService
type PortfoliosService interface{ ... }
    func NewPortfoliosEntity(client *http.Client, authToken string, baseURLs map[string]string) PortfoliosService
type SegmentsService interface{ ... }
    func NewSegmentsEntity(client *http.Client, authToken string, baseURLs map[string]string) SegmentsService
type TransactionRoutesService interface{ ... }
    func NewTransactionRoutesEntity(client *http.Client, authToken string, baseURLs map[string]string) TransactionRoutesService
type TransactionsService interface{ ... }
    func NewTransactionsEntity(client *http.Client, authToken string, baseURLs map[string]string) TransactionsService
